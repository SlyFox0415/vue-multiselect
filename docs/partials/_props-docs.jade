section.docs
  h1.typo__h1 Config
  hr.typo__hr
  h2.typo__h2 Props
  .grid__row
    .grid__column
      pre.language-javascript
        code.
          // multiselectMixin.js

          props: {
            /**
             * Array of available options: Objects, Strings or Integers.
             * If array of objects, visible label will default to option.label.
             * If `labal` prop is passed, label will equal option['label']
             * @type {Array}
             */
            options: {
              type: Array,
              required: true
            },
            /**
             * Equivalent to the `multiple` attribute on a `<select>` input.
             * @default false
             * @type {Boolean}
             */
            multiple: {
              type: Boolean,
              default: false
            },
            /**
             * Required. Presets the selected options. Add `.sync` to
             * update parent value. If this.onChange callback is present,
             * this will not update. In that case, the parent is responsible
             * for updating this value.
             * @type {Object||Array||String||Integer}
             */
            selected: {
              required: true
            },
            /**
             * Key to compare objects
             * @default 'id'
             * @type {String}
             */
            key: {
              type: String,
              default: false
            },
            /**
             * Label to look for in option Object
             * @default 'label'
             * @type {String}
             */
            label: {
              type: String,
              default: false
            },
            /**
             * Enable/disable search in options
             * @default true
             * @type {Boolean}
             */
            searchable: {
              type: Boolean,
              default: true
            },
            /**
             * Clear the search input after select()
             * @default true
             * @type {Boolean}
             */
            clearOnSelect: {
              type: Boolean,
              default: true
            },
            /**
             * Hide already selected options
             * @default false
             * @type {Boolean}
             */
            hideSelected: {
              type: Boolean,
              default: false
            },
            /**
             * Equivalent to the `placeholder` attribute on a `<select>` input.
             * @default 'Select option'
             * @type {String}
             */
            placeholder: {
              type: String,
              default: 'Select option'
            },
            /**
             * Sets maxHeight style value of the dropdown
             * @default 300
             * @type {Integer}
             */
            maxHeight: {
              type: Number,
              default: 300
            },
            /**
             * Allow to remove all selected values
             * @default true
             * @type {Boolean}
             */
            allowEmpty: {
              type: Boolean,
              default: true
            },
            /**
             * Callback function to call after this.value changes
             * @callback onChange
             * @default false
             * @param {Array||Object||String||Integer} Current this.value
             * @param {Integer} $index of current selection
             * @type {Function}
             */
            onChange: {
              type: Function,
              default: false
            },
            /**
             * Callback function to call after this.search changes
             * @callback onSearchChange
             * @default false
             * @param {String} Pass current search String
             * @type {Function}
             */
            onSearchChange: {
              type: Function,
              default: false
            },
            /**
             * Value that indicates if the dropdown has been used.
             * Useful for validation.
             * @default false
             * @type {Boolean}
             */
            touched: {
              type: Boolean,
              default: false
            },
            /**
             * Reset this.value, this.search, this.selected after this.value changes.
             * Useful if want to create a stateless dropdown, that fires the this.onChange
             * callback function with different params.
             * @default false
             * @type {Boolean}
             */
            resetAfter: {
              type: Boolean,
              default: false
            },
            /**
             * Enable/disable closing after selecting an option
             * @default true
             * @type {Boolean}
             */
            closeOnSelect: {
              type: Boolean,
              default: true
            },
            /**
             * Function to interpolate the custom label
             * @default false
             * @type {Function}
             */
            customLabel: {
              type: Function,
              default: false
            },
            /**
             * Disable / Enable tagging
             * @default false
             * @type {Boolean}
             */
            taggable: {
              type: Boolean,
              default: false
            },
            /**
             * Callback function to run when attemting to add a tag
             * @default suitable for primitive values
             * @param {String} Tag string to build a tag
             * @type {Function}
             */
            onTag: {
              type: Function,
              default: function (tag) {
                this.options.push(tag)
                this.value.push(tag)
              }
            },
            /**
             * String to show when highlighting a potential tag
             * @default 'Press enter to create a tag'
             * @type {String}
            */
            tagPlaceholder: {
              type: String,
              default: 'Press enter to create a tag'
            },
            /**
             * Number of allowed selected options. No limit if false.
             * @default False
             * @type {Number}
            */
            max: {
              type: Number,
              default: false
            }
          }

          // pointerMixin.js

          props: {
            /**
             * Enable/disable highlighting of the pointed value.
             * @type {Boolean}
             * @default true
             */
            showPointer: {
              type: Boolean,
              default: true
            }
          }

          // Multiselect.vue

          props: {
            /**
             * String to show when pointing to an option
             * @default 'Press enter to select'
             * @type {String}
             */
            selectLabel: {
              type: String,
              default: 'Press enter to select'
            },
            /**
             * String to show next to selected option
             * @default 'Selected'
             * @type {String}
            */
            selectedLabel: {
              type: String,
              default: 'Selected'
            },
            /**
             * String to show when pointing to an alredy selected option
             * @default 'Press enter to remove'
             * @type {String}
            */
            deselectLabel: {
              type: String,
              default: 'Press enter to remove'
            },
            /**
             * Decide whether to show pointer labels
             * @default true
             * @type {Boolean}
            */
            showLabels: {
              type: Boolean,
              default: true
            },
            /**
             * Label to look for in option Object
             * @default 'label'
             * @type {String}
             */
            limit: {
              type: Number,
              default: 99999
            },
            /**
             * Function that process the message shown when selected
             * elements pass the defined limit.
             * @default 'and * more'
             * @param {Int} count Number of elements more than limit
             * @type {Function}
             */
            limitText: {
              type: Function,
              default: count => `and ${count} more`
            }
          }
